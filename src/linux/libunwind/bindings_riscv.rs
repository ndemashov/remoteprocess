#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(improper_ctypes)]
#![allow(clippy::useless_transmute)]
#![allow(clippy::default_trait_access)]
#![allow(clippy::cast_lossless)]
#![allow(clippy::trivially_copy_pass_by_ref)]

/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<stack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type __riscv_mc_gp_state = [::std::os::raw::c_ulong; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __riscv_mc_f_ext_state {
    pub __f: [::std::os::raw::c_uint; 32usize],
    pub __fcsr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___riscv_mc_f_ext_state() {
    const UNINIT: ::std::mem::MaybeUninit<__riscv_mc_f_ext_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__riscv_mc_f_ext_state>(),
        132usize,
        concat!("Size of: ", stringify!(__riscv_mc_f_ext_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__riscv_mc_f_ext_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__riscv_mc_f_ext_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_f_ext_state),
            "::",
            stringify!(__f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fcsr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_f_ext_state),
            "::",
            stringify!(__fcsr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __riscv_mc_d_ext_state {
    pub __f: [::std::os::raw::c_ulonglong; 32usize],
    pub __fcsr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___riscv_mc_d_ext_state() {
    const UNINIT: ::std::mem::MaybeUninit<__riscv_mc_d_ext_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__riscv_mc_d_ext_state>(),
        264usize,
        concat!("Size of: ", stringify!(__riscv_mc_d_ext_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__riscv_mc_d_ext_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__riscv_mc_d_ext_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_d_ext_state),
            "::",
            stringify!(__f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fcsr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_d_ext_state),
            "::",
            stringify!(__fcsr)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __riscv_mc_q_ext_state {
    pub __f: [::std::os::raw::c_ulonglong; 64usize],
    pub __fcsr: ::std::os::raw::c_uint,
    pub __glibc_reserved: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout___riscv_mc_q_ext_state() {
    const UNINIT: ::std::mem::MaybeUninit<__riscv_mc_q_ext_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__riscv_mc_q_ext_state>(),
        528usize,
        concat!("Size of: ", stringify!(__riscv_mc_q_ext_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__riscv_mc_q_ext_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__riscv_mc_q_ext_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_q_ext_state),
            "::",
            stringify!(__f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fcsr) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_q_ext_state),
            "::",
            stringify!(__fcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_q_ext_state),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __riscv_mc_fp_state {
    pub __f: __riscv_mc_f_ext_state,
    pub __d: __riscv_mc_d_ext_state,
    pub __q: __riscv_mc_q_ext_state,
}
#[test]
fn bindgen_test_layout___riscv_mc_fp_state() {
    const UNINIT: ::std::mem::MaybeUninit<__riscv_mc_fp_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__riscv_mc_fp_state>(),
        528usize,
        concat!("Size of: ", stringify!(__riscv_mc_fp_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__riscv_mc_fp_state>(),
        16usize,
        concat!("Alignment of ", stringify!(__riscv_mc_fp_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_fp_state),
            "::",
            stringify!(__f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_fp_state),
            "::",
            stringify!(__d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__q) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__riscv_mc_fp_state),
            "::",
            stringify!(__q)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct mcontext_t {
    pub __gregs: __riscv_mc_gp_state,
    pub __fpregs: __riscv_mc_fp_state,
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<mcontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        784usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__gregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpregs) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__fpregs)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
pub struct ucontext_t {
    pub __uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_sigmask: sigset_t,
    pub __glibc_reserved: __IncompleteArrayField<::std::os::raw::c_char>,
    pub __bindgen_padding_0: u64,
    pub uc_mcontext: mcontext_t,
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        960usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        16usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__glibc_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type unw_word_t = u64;
pub type unw_sword_t = i64;
pub type unw_tdep_fpreg_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_tdep_save_loc {
    pub unused: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_unw_tdep_save_loc() {
    const UNINIT: ::std::mem::MaybeUninit<unw_tdep_save_loc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_tdep_save_loc>(),
        1usize,
        concat!("Size of: ", stringify!(unw_tdep_save_loc))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_tdep_save_loc>(),
        1usize,
        concat!("Alignment of ", stringify!(unw_tdep_save_loc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_tdep_save_loc),
            "::",
            stringify!(unused)
        )
    );
}
pub type unw_tdep_save_loc_t = unw_tdep_save_loc;
pub type unw_tdep_context_t = ucontext_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_tdep_proc_info_t {
    pub unused: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_unw_tdep_proc_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<unw_tdep_proc_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_tdep_proc_info_t>(),
        1usize,
        concat!("Size of: ", stringify!(unw_tdep_proc_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_tdep_proc_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(unw_tdep_proc_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_tdep_proc_info_t),
            "::",
            stringify!(unused)
        )
    );
}
pub const unw_dyn_operation_t_UNW_DYN_STOP: unw_dyn_operation_t = 0;
pub const unw_dyn_operation_t_UNW_DYN_SAVE_REG: unw_dyn_operation_t = 1;
pub const unw_dyn_operation_t_UNW_DYN_SPILL_FP_REL: unw_dyn_operation_t = 2;
pub const unw_dyn_operation_t_UNW_DYN_SPILL_SP_REL: unw_dyn_operation_t = 3;
pub const unw_dyn_operation_t_UNW_DYN_ADD: unw_dyn_operation_t = 4;
pub const unw_dyn_operation_t_UNW_DYN_POP_FRAMES: unw_dyn_operation_t = 5;
pub const unw_dyn_operation_t_UNW_DYN_LABEL_STATE: unw_dyn_operation_t = 6;
pub const unw_dyn_operation_t_UNW_DYN_COPY_STATE: unw_dyn_operation_t = 7;
pub const unw_dyn_operation_t_UNW_DYN_ALIAS: unw_dyn_operation_t = 8;
pub type unw_dyn_operation_t = ::std::os::raw::c_uint;
pub const unw_dyn_info_format_t_UNW_INFO_FORMAT_DYNAMIC: unw_dyn_info_format_t = 0;
pub const unw_dyn_info_format_t_UNW_INFO_FORMAT_TABLE: unw_dyn_info_format_t = 1;
pub const unw_dyn_info_format_t_UNW_INFO_FORMAT_REMOTE_TABLE: unw_dyn_info_format_t = 2;
pub const unw_dyn_info_format_t_UNW_INFO_FORMAT_ARM_EXIDX: unw_dyn_info_format_t = 3;
pub const unw_dyn_info_format_t_UNW_INFO_FORMAT_IP_OFFSET: unw_dyn_info_format_t = 4;
pub type unw_dyn_info_format_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_op {
    pub tag: i8,
    pub qp: i8,
    pub reg: i16,
    pub when: i32,
    pub val: unw_word_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_op() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_op>(),
        16usize,
        concat!("Size of: ", stringify!(unw_dyn_op))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_op>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_op))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_op),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_op),
            "::",
            stringify!(qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_op),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).when) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_op),
            "::",
            stringify!(when)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_op),
            "::",
            stringify!(val)
        )
    );
}
pub type unw_dyn_op_t = unw_dyn_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_region_info {
    pub next: *mut unw_dyn_region_info,
    pub insn_count: i32,
    pub op_count: u32,
    pub op: [unw_dyn_op_t; 1usize],
}
#[test]
fn bindgen_test_layout_unw_dyn_region_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_region_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_region_info>(),
        32usize,
        concat!("Size of: ", stringify!(unw_dyn_region_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_region_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_region_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_region_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).insn_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_region_info),
            "::",
            stringify!(insn_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_region_info),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_region_info),
            "::",
            stringify!(op)
        )
    );
}
pub type unw_dyn_region_info_t = unw_dyn_region_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_proc_info {
    pub name_ptr: unw_word_t,
    pub handler: unw_word_t,
    pub flags: u32,
    pub pad0: i32,
    pub regions: *mut unw_dyn_region_info_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_proc_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_proc_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_proc_info>(),
        32usize,
        concat!("Size of: ", stringify!(unw_dyn_proc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_proc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_proc_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_proc_info),
            "::",
            stringify!(name_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_proc_info),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_proc_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_proc_info),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_proc_info),
            "::",
            stringify!(regions)
        )
    );
}
pub type unw_dyn_proc_info_t = unw_dyn_proc_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_table_info {
    pub name_ptr: unw_word_t,
    pub segbase: unw_word_t,
    pub table_len: unw_word_t,
    pub table_data: *mut unw_word_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_table_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_table_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_table_info>(),
        32usize,
        concat!("Size of: ", stringify!(unw_dyn_table_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_table_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_table_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_table_info),
            "::",
            stringify!(name_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segbase) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_table_info),
            "::",
            stringify!(segbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_table_info),
            "::",
            stringify!(table_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_table_info),
            "::",
            stringify!(table_data)
        )
    );
}
pub type unw_dyn_table_info_t = unw_dyn_table_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_remote_table_info {
    pub name_ptr: unw_word_t,
    pub segbase: unw_word_t,
    pub table_len: unw_word_t,
    pub table_data: unw_word_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_remote_table_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_remote_table_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_remote_table_info>(),
        32usize,
        concat!("Size of: ", stringify!(unw_dyn_remote_table_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_remote_table_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_remote_table_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_remote_table_info),
            "::",
            stringify!(name_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segbase) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_remote_table_info),
            "::",
            stringify!(segbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_remote_table_info),
            "::",
            stringify!(table_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_remote_table_info),
            "::",
            stringify!(table_data)
        )
    );
}
pub type unw_dyn_remote_table_info_t = unw_dyn_remote_table_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unw_dyn_info {
    pub next: *mut unw_dyn_info,
    pub prev: *mut unw_dyn_info,
    pub start_ip: unw_word_t,
    pub end_ip: unw_word_t,
    pub gp: unw_word_t,
    pub format: i32,
    pub pad: i32,
    pub load_offset: unw_word_t,
    pub u: unw_dyn_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union unw_dyn_info__bindgen_ty_1 {
    pub pi: unw_dyn_proc_info_t,
    pub ti: unw_dyn_table_info_t,
    pub rti: unw_dyn_remote_table_info_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_info__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(unw_dyn_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info__bindgen_ty_1),
            "::",
            stringify!(pi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ti) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info__bindgen_ty_1),
            "::",
            stringify!(ti)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rti) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info__bindgen_ty_1),
            "::",
            stringify!(rti)
        )
    );
}
#[test]
fn bindgen_test_layout_unw_dyn_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_info>(),
        88usize,
        concat!("Size of: ", stringify!(unw_dyn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(start_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ip) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(end_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(load_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info),
            "::",
            stringify!(u)
        )
    );
}
pub type unw_dyn_info_t = unw_dyn_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_dyn_info_list {
    pub version: u32,
    pub generation: u32,
    pub first: *mut unw_dyn_info_t,
}
#[test]
fn bindgen_test_layout_unw_dyn_info_list() {
    const UNINIT: ::std::mem::MaybeUninit<unw_dyn_info_list> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_dyn_info_list>(),
        16usize,
        concat!("Size of: ", stringify!(unw_dyn_info_list))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_dyn_info_list>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_dyn_info_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info_list),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info_list),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_dyn_info_list),
            "::",
            stringify!(first)
        )
    );
}
pub type unw_dyn_info_list_t = unw_dyn_info_list;
pub const unw_error_t_UNW_ESUCCESS: unw_error_t = 0;
pub const unw_error_t_UNW_EUNSPEC: unw_error_t = 1;
pub const unw_error_t_UNW_ENOMEM: unw_error_t = 2;
pub const unw_error_t_UNW_EBADREG: unw_error_t = 3;
pub const unw_error_t_UNW_EREADONLYREG: unw_error_t = 4;
pub const unw_error_t_UNW_ESTOPUNWIND: unw_error_t = 5;
pub const unw_error_t_UNW_EINVALIDIP: unw_error_t = 6;
pub const unw_error_t_UNW_EBADFRAME: unw_error_t = 7;
pub const unw_error_t_UNW_EINVAL: unw_error_t = 8;
pub const unw_error_t_UNW_EBADVERSION: unw_error_t = 9;
pub const unw_error_t_UNW_ENOINFO: unw_error_t = 10;
pub type unw_error_t = ::std::os::raw::c_uint;
pub const unw_frame_regnum_t_UNW_REG_IP: unw_frame_regnum_t = 64;
pub const unw_frame_regnum_t_UNW_REG_SP: unw_frame_regnum_t = 2;
pub const unw_frame_regnum_t_UNW_REG_EH: unw_frame_regnum_t = 10;
pub const unw_frame_regnum_t_UNW_REG_LAST: unw_frame_regnum_t = 64;
pub type unw_frame_regnum_t = ::std::os::raw::c_uint;
pub const unw_caching_policy_t_UNW_CACHE_NONE: unw_caching_policy_t = 0;
pub const unw_caching_policy_t_UNW_CACHE_GLOBAL: unw_caching_policy_t = 1;
pub const unw_caching_policy_t_UNW_CACHE_PER_THREAD: unw_caching_policy_t = 2;
pub type unw_caching_policy_t = ::std::os::raw::c_uint;
pub const unw_init_local2_flags_t_UNW_INIT_SIGNAL_FRAME: unw_init_local2_flags_t = 1;
pub type unw_init_local2_flags_t = ::std::os::raw::c_uint;
pub type unw_regnum_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_cursor {
    pub opaque: [unw_word_t; 4096usize],
}
#[test]
fn bindgen_test_layout_unw_cursor() {
    const UNINIT: ::std::mem::MaybeUninit<unw_cursor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_cursor>(),
        32768usize,
        concat!("Size of: ", stringify!(unw_cursor))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_cursor>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_cursor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_cursor),
            "::",
            stringify!(opaque)
        )
    );
}
pub type unw_cursor_t = unw_cursor;
pub type unw_context_t = unw_tdep_context_t;
pub type unw_fpreg_t = unw_tdep_fpreg_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_addr_space {
    _unused: [u8; 0],
}
pub type unw_addr_space_t = *mut unw_addr_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_proc_info {
    pub start_ip: unw_word_t,
    pub end_ip: unw_word_t,
    pub lsda: unw_word_t,
    pub handler: unw_word_t,
    pub gp: unw_word_t,
    pub flags: unw_word_t,
    pub format: ::std::os::raw::c_int,
    pub unwind_info_size: ::std::os::raw::c_int,
    pub unwind_info: *mut ::std::os::raw::c_void,
    pub extra: unw_tdep_proc_info_t,
}
#[test]
fn bindgen_test_layout_unw_proc_info() {
    const UNINIT: ::std::mem::MaybeUninit<unw_proc_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_proc_info>(),
        72usize,
        concat!("Size of: ", stringify!(unw_proc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_proc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_proc_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(start_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(end_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lsda) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(lsda)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unwind_info_size) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(unwind_info_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unwind_info) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(unwind_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_proc_info),
            "::",
            stringify!(extra)
        )
    );
}
pub type unw_proc_info_t = unw_proc_info;
pub type unw_reg_states_callback = ::std::option::Option<
    unsafe extern "C" fn(
        token: *mut ::std::os::raw::c_void,
        reg_states_data: *mut ::std::os::raw::c_void,
        reg_states_data_size: usize,
        start_ip: unw_word_t,
        end_ip: unw_word_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unw_accessors {
    pub find_proc_info: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: unw_word_t,
            arg3: *mut unw_proc_info_t,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub put_unwind_info: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: *mut unw_proc_info_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    pub get_dyn_info_list_addr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: *mut unw_word_t,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub access_mem: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: unw_word_t,
            arg3: *mut unw_word_t,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub access_reg: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: unw_regnum_t,
            arg3: *mut unw_word_t,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub access_fpreg: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: unw_regnum_t,
            arg3: *mut unw_fpreg_t,
            arg4: ::std::os::raw::c_int,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub resume: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: *mut unw_cursor_t,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_proc_name: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: unw_word_t,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
            arg5: *mut unw_word_t,
            arg6: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ptrauth_insn_mask: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: unw_addr_space_t,
            arg2: *mut ::std::os::raw::c_void,
        ) -> unw_word_t,
    >,
}
#[test]
fn bindgen_test_layout_unw_accessors() {
    const UNINIT: ::std::mem::MaybeUninit<unw_accessors> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_accessors>(),
        72usize,
        concat!("Size of: ", stringify!(unw_accessors))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_accessors>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_accessors))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).find_proc_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(find_proc_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_unwind_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(put_unwind_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_dyn_info_list_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(get_dyn_info_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_mem) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(access_mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_reg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(access_reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_fpreg) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(access_fpreg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resume) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(resume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_proc_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(get_proc_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptrauth_insn_mask) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_accessors),
            "::",
            stringify!(ptrauth_insn_mask)
        )
    );
}
pub type unw_accessors_t = unw_accessors;
pub const unw_save_loc_type_UNW_SLT_NONE: unw_save_loc_type = 0;
pub const unw_save_loc_type_UNW_SLT_MEMORY: unw_save_loc_type = 1;
pub const unw_save_loc_type_UNW_SLT_REG: unw_save_loc_type = 2;
pub type unw_save_loc_type = ::std::os::raw::c_uint;
pub use self::unw_save_loc_type as unw_save_loc_type_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct unw_save_loc {
    pub type_: unw_save_loc_type_t,
    pub u: unw_save_loc__bindgen_ty_1,
    pub extra: unw_tdep_save_loc_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union unw_save_loc__bindgen_ty_1 {
    pub addr: unw_word_t,
    pub regnum: unw_regnum_t,
}
#[test]
fn bindgen_test_layout_unw_save_loc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<unw_save_loc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_save_loc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(unw_save_loc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_save_loc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_save_loc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_save_loc__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_save_loc__bindgen_ty_1),
            "::",
            stringify!(regnum)
        )
    );
}
#[test]
fn bindgen_test_layout_unw_save_loc() {
    const UNINIT: ::std::mem::MaybeUninit<unw_save_loc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<unw_save_loc>(),
        24usize,
        concat!("Size of: ", stringify!(unw_save_loc))
    );
    assert_eq!(
        ::std::mem::align_of::<unw_save_loc>(),
        8usize,
        concat!("Alignment of ", stringify!(unw_save_loc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_save_loc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_save_loc),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unw_save_loc),
            "::",
            stringify!(extra)
        )
    );
}
pub type unw_save_loc_t = unw_save_loc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dl_phdr_info {
    _unused: [u8; 0],
}
pub type unw_iterate_phdr_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut dl_phdr_info,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type unw_iterate_phdr_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: unw_iterate_phdr_callback_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
